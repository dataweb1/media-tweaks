<?php

use Drupal\Component\Serialization\Json;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\MessageCommand;
use Drupal\Core\Ajax\PrependCommand;
use Drupal\Core\Ajax\RemoveCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\file\Plugin\Field\FieldWidget\FileWidget;
use Drupal\media_tweaks\Ajax\CloseDialogOrRefreshPageCommand;
use voku\helper\URLify;

/**
 * Implements hook_field_widget_form_alter().
 */
function media_tweaks_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  if (isset($element['selection'])) {
    // Add 'edit' button to Media widgets.
    foreach ($element['selection'] as $delta => &$item) {
      if (is_int($delta)) {
        $url = Url::fromRoute('entity.media.canonical', [
          'media' => $item['target_id']['#value'],
          'title' => 'Edit media',
          'no_redirect' => 1,
        ]);
        $link = Link::fromTextAndUrl('Edit', $url)->toRenderable();
        $link['#attributes'] = [
          'class' => [
            'media-library-item__edit',
            'icon-link',
          ]
        ];
        $item['edit_button'] = $link;

        $item['#attached']['library'][] = 'media_tweaks/media_widget';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function media_tweaks_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  // For media edit form.
  //if (in_array($route_name, ['entity.media.canonical', 'entity.media.edit_form', 'media_library.ui'])) {
  if (in_array($form_id, ['media_library_add_form_upload', 'media_image_edit_form'])) {

    if ($form_id == 'media_library_add_form_upload') {
      if (isset($form['container']['upload'])) {
      return FALSE;
      }
    }

    // Unset revision since it is not that usefull form media.
    unset($form['revision_information']);
    unset($form['revision_log_message']);
    unset($form['revision']);


    //if (isset($form['actions'])) {
      $form['actions']['cancel'] = [
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#weight' => 11,
        '#ajax' => [
          'callback' => '_cancelEditMedia'
        ],
      ];

      if ($form_id == 'media_library_add_form_upload') {
        //dpm($form);
        $form['items']['#type'] = 'vertical_tabs';
        $form['items']['#attributes']['class'][] = 'media-library-add-form-wrapper';
        foreach ($form['media'] as $delta => &$element) {
          if (is_int($delta)) {
            //dpm($element);
            $element['#type'] = 'details';
            $element['#group'] = 'items';
            $element['#title'] = $element['fields']['name']['#markup'];
            //$element['#prefix'] = '<div class="media-item-wrapper">';
            //$element['#suffix'] = '</div>';

            $element['remove_button']['#weight'] = 0;
          }
        }
        //dpm($form['media']);
        $form['#after_build'][] = '_media_library_add_form_after_build';
      }


      if ($form_id == 'media_image_edit_form') {
        $form['#prefix'] = '<div id="media_edit_form_wrapper">';
        $form['#suffix'] = '</div>';

        // AJAXify the media edit form.
        $form['actions']['submit']['#ajax'] = [
          'callback' => '_afterEditMedia'
        ];
        $form['actions']['submit']['#weight'] = 10;

        $form['actions']['delete']['#weight'] = 12;

        $form['#after_build'][] = '_media_image_edit_form_after_build';
      }


    //}

    $form['#attached']['library'][] = 'media_tweaks/media_entity_form';
    $form['#attached']['library'][] = 'media_tweaks/close_dialog_or_refresh_page_command';
    $form['#attached']['library'][] = 'core/drupal.ajax';
  }

  // Add edit media entity link on CKEditor 'Edit media'.
  if ($route_name == 'editor.media_dialog') {
    $media_uuid = $form_state->getUserInput()['editor_object']['attributes']['data-entity-uuid'];
    $media_loaded_by_uuid = \Drupal::entityTypeManager()->getStorage('media')->loadByProperties(['uuid' => $media_uuid]);
    if ($media_loaded_by_uuid = reset($media_loaded_by_uuid)) {
      $url = Url::fromRoute('entity.media.canonical', [
        'media' => $media_loaded_by_uuid->id(),
      ]);
      $edit_media_link = Link::fromTextAndUrl(t('Edit media'), $url)->toRenderable();
      $edit_media_link['#attributes'] = [
        'class' => [
          'button',
        ]
      ];

      $form['actions']['edit_media_link'] = $edit_media_link;
    }
  }
}


/**
 * Implements hook_link_alter().
 */
function media_tweaks_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];

  if (!$url->isRouted()) {
    return;
  }

  $routeName = $url->getRouteName();
  if (!in_array($routeName, [
    'entity.media.canonical',
    'entity.media.edit_form',
    'entity.media.delete_form',
    'entity.file.rename_form',
  ])) {
    return;
  }

  $dialog_options = [
    'width' => '800',
    'maxWith' => '50%',
    'height' => 'auto',
    'modal' => TRUE,
    'dialogClass' => URLify::filter($routeName).'-dialog',
  ];

  if (isset($url->getRouteParameters()['title'])) {
    $dialog_options['title'] = $url->getRouteParameters()['title'];
  }

  $variables['options']['attributes']['class'][] = 'use-ajax';
  $variables['options']['attributes']['data-dialog-type'] = 'dialog';
  $variables['options']['attributes']['data-dialog-options'] = Json::encode($dialog_options);

  $variables['#attached']['library'][] = 'core/drupal.ajax';
}

function _media_library_add_form_after_build(array $form, FormStateInterface &$formState) {

  //foreach (['field_media_image', 'field_media_document', 'field_media_video'] as $element) {


    foreach ($form['media'] as $delta => &$element) {
      if (is_int($delta)) {

        if (isset($element['fields']['field_media_image'])) {
          $element['fields']['field_media_image']['widget'][0]['custom_fields'] = [
            '#type' => 'details',
            '#title' => t('Extra information'),
            '#weight' => 21,
            '#tree' => FALSE,
            '#open' => TRUE,
          ];
          $element['fields']['field_media_image']['widget'][0]['image_crop']['#weight'] = 22;

          foreach ($element['fields'] as $field_delta => $field) {
            if (substr($field_delta, 0, 6) == 'field_') {
              if (!in_array($field_delta, ['field_media_image', 'field_media_document', 'field_media_video'])) {
                //dpm($field);
                $element['fields']['field_media_image']['widget'][0]['custom_fields'][$field_delta] = $field;
                unset($element['fields'][$field_delta]);
              }

            }
          }

          $element['fields']['field_media_image']['widget'][0]['custom_fields']['alt'] = $element['fields']['field_media_image']['widget'][0]['alt'];
          unset($element['fields']['field_media_image']['widget'][0]['alt']);

          $element['fields']['field_media_image']['widget'][0]['custom_fields']['title'] = $element['fields']['field_media_image']['widget'][0]['title'];
          unset($element['fields']['field_media_image']['widget'][0]['title']);

          unset($element['fields']['field_media_image']['widget'][0]['image_crop']['crop_reuse']);

        }

      }
    }
  //}
//dpm($form);

  return $form;
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 *
 * @return array
 */
function _media_image_edit_form_after_build(array $form, FormStateInterface &$formState) {

  foreach (['field_media_image', 'field_media_document', 'field_media_video'] as $element) {
    if (isset($form[$element])) {
      $form[$element]['widget'][0]['remove_button']['#value'] = t('Replace file');
    }
  }

  if (isset($form['field_media_image'])) {
    $form['field_media_image']['widget'][0]['custom_fields'] = [
      '#type' => 'details',
      '#title' => t('Extra information'),
      '#weight' => 21,
      '#tree' => FALSE,
      '#open' => TRUE,
    ];
    $form['field_media_image']['widget'][0]['image_crop']['#weight'] = 22;


    foreach ($form as $delta => $element) {
      if (substr($delta, 0, 6) == 'field_') {
        if (!in_array($delta, ['field_media_image', 'field_media_document', 'field_media_video'])) {
          $form['field_media_image']['widget'][0]['custom_fields'][$delta] = $element;
          unset($form[$delta]);
        }
      }
    }
    $form['field_media_image']['widget'][0]['custom_fields']['alt'] = $form['field_media_image']['widget'][0]['alt'];
    unset($form['field_media_image']['widget'][0]['alt']);

    $form['field_media_image']['widget'][0]['custom_fields']['title'] = $form['field_media_image']['widget'][0]['title'];
    unset($form['field_media_image']['widget'][0]['title']);

    unset($form['field_media_image']['widget'][0]['image_crop']['crop_reuse']);

    //dpm($form['field_media_image']['widget'][0]['image_crop']);
  }

  return $form;
}

/**
 * AJAX callback after File Rename.
 */
function _afterEditMedia(array $form, FormStateInterface &$formState): AjaxResponse {
  dpm('_afterEditMedia');
  $response = new AjaxResponse();
  $messages = \Drupal::messenger()->all();
  if (!isset($messages['error'])) {
    // For media edit form coming via media_canonical.
    $response->addCommand(new CloseDialogOrRefreshPageCommand('.entitymediacanonical-dialog .ui-dialog-content'));

    // For media edit form coming via media_edit.form.
    $response->addCommand(new CloseDialogOrRefreshPageCommand('.entitymediaedit-form-dialog .ui-dialog-content'));
    $response->addCommand(new MessageCommand($messages['status'][0], NULL, ['type' => 'status']));
    \Drupal::messenger()->deleteAll();
  }
  else {
    /** @var \Drupal\Core\Render\RendererInterface $renderer */
    $renderer = \Drupal::service('renderer');

    /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
    $moduleHandler = \Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('inline_form_errors')) {
      $response->addCommand(new HtmlCommand('#media_edit_form_wrapper', $form));
    }

    $messagesElement = [
      '#type' => 'container',
      '#attributes' => [
        'class' => 'edit-media-form-messages',
      ],
      'messages' => ['#type' => 'status_messages'],
    ];

    $response->addCommand(new RemoveCommand('.edit-media-form-messages'));

    $response->addCommand(new PrependCommand(
      '#media_edit_form_wrapper',
      $renderer->renderRoot($messagesElement)
    ));
  }
  return $response;
}

/**
 * AJAX callback on cancel File Rename.
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $formState
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 */
function _cancelEditMedia(array $form, FormStateInterface &$formState): AjaxResponse {
  $response = new AjaxResponse();
  // For media edit form coming via media_canonical.
  $response->addCommand(new CloseDialogCommand('.media-library-widget-modal .ui-dialog-content'));

  // For media edit form coming via media_canonical.
  $response->addCommand(new CloseDialogCommand('.entitymediacanonical-dialog .ui-dialog-content'));

  // For media edit form coming via media_edit.form.
  $response->addCommand(new CloseDialogCommand('.entitymediaedit-form-dialog .ui-dialog-content'));
  return $response;
}
